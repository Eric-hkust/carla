// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CameraInfo.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CameraInfo.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>
#include <cmath>

#define builtin_interfaces_msg_Time_max_cdr_typesize 8ULL;
#define sensor_msgs_msg_CameraInfo_max_cdr_typesize 3793ULL;
#define sensor_msgs_msg_RegionOfInterest_max_cdr_typesize 17ULL;
#define std_msgs_msg_Header_max_cdr_typesize 268ULL;
#define builtin_interfaces_msg_Time_max_key_cdr_typesize 0ULL;
#define sensor_msgs_msg_CameraInfo_max_key_cdr_typesize 0ULL;
#define sensor_msgs_msg_RegionOfInterest_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Header_max_key_cdr_typesize 0ULL;

sensor_msgs::msg::CameraInfo::CameraInfo(uint32_t height, uint32_t width, double fov) :
m_height(height),
m_width(width)
{
    // string m_distortion_model
    m_distortion_model = "plumb_bob";

    const double cx = static_cast<double>(m_width) / 2.0;
    const double cy = static_cast<double>(m_height) / 2.0;
    const double fx = static_cast<double>(m_width) / (2.0 * std::tan(fov) * M_PI / 360.0);
    const double fy = fx;

    m_D = { 0.0, 0.0, 0.0, 0.0, 0.0 };
    m_K = {fx, 0.0, cx, 0.0, fy, cy, 0.0, 0.0, 1.0};
    m_R = { 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    m_P = {fx, 0.0, cx, 0.0, 0.0, fy, cy, 0.0, 0.0, 0.0, 1.0, 0.0};

    m_binning_x = 0;
    m_binning_y = 0;
}

sensor_msgs::msg::CameraInfo::~CameraInfo()
{
}

sensor_msgs::msg::CameraInfo::CameraInfo(
        const CameraInfo& x)
{
    m_header = x.m_header;
    m_height = x.m_height;
    m_width = x.m_width;
    m_distortion_model = x.m_distortion_model;
    m_D = x.m_D;
    m_K = x.m_K;
    m_R = x.m_R;
    m_P = x.m_P;
    m_binning_x = x.m_binning_x;
    m_binning_y = x.m_binning_y;
    m_roi = x.m_roi;
}

sensor_msgs::msg::CameraInfo::CameraInfo(
        CameraInfo&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_height = x.m_height;
    m_width = x.m_width;
    m_distortion_model = std::move(x.m_distortion_model);
    m_D = std::move(x.m_D);
    m_K = std::move(x.m_K);
    m_R = std::move(x.m_R);
    m_P = std::move(x.m_P);
    m_binning_x = x.m_binning_x;
    m_binning_y = x.m_binning_y;
    m_roi = std::move(x.m_roi);
}

sensor_msgs::msg::CameraInfo& sensor_msgs::msg::CameraInfo::operator =(
        const CameraInfo& x)
{
    m_header = x.m_header;
    m_height = x.m_height;
    m_width = x.m_width;
    m_distortion_model = x.m_distortion_model;
    m_D = x.m_D;
    m_K = x.m_K;
    m_R = x.m_R;
    m_P = x.m_P;
    m_binning_x = x.m_binning_x;
    m_binning_y = x.m_binning_y;
    m_roi = x.m_roi;

    return *this;
}

sensor_msgs::msg::CameraInfo& sensor_msgs::msg::CameraInfo::operator =(
        CameraInfo&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_height = x.m_height;
    m_width = x.m_width;
    m_distortion_model = std::move(x.m_distortion_model);
    m_D = std::move(x.m_D);
    m_K = std::move(x.m_K);
    m_R = std::move(x.m_R);
    m_P = std::move(x.m_P);
    m_binning_x = x.m_binning_x;
    m_binning_y = x.m_binning_y;
    m_roi = std::move(x.m_roi);

    return *this;
}

bool sensor_msgs::msg::CameraInfo::operator ==(
        const CameraInfo& x) const
{
    return (m_header == x.m_header && m_height == x.m_height && m_width == x.m_width && m_distortion_model == x.m_distortion_model && m_D == x.m_D && m_K == x.m_K && m_R == x.m_R && m_P == x.m_P && m_binning_x == x.m_binning_x && m_binning_y == x.m_binning_y && m_roi == x.m_roi);
}

bool sensor_msgs::msg::CameraInfo::operator !=(
        const CameraInfo& x) const
{
    return !(*this == x);
}

size_t sensor_msgs::msg::CameraInfo::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return sensor_msgs_msg_CameraInfo_max_cdr_typesize;
}

size_t sensor_msgs::msg::CameraInfo::getCdrSerializedSize(
        const sensor_msgs::msg::CameraInfo& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;
    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.distortion_model().size() + 1;
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.D().size() > 0)
    {
        current_alignment += (data.D().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.K().size() > 0)
    {
        current_alignment += (data.K().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.R().size() > 0)
    {
        current_alignment += (data.R().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.P().size() > 0)
    {
        current_alignment += (data.P().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += sensor_msgs::msg::RegionOfInterest::getCdrSerializedSize(data.roi(), current_alignment);

    return current_alignment - initial_alignment;
}

void sensor_msgs::msg::CameraInfo::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_header;
    scdr << m_height;
    scdr << m_width;
    scdr << m_distortion_model.c_str();
    scdr << m_D;
    scdr << m_K;
    scdr << m_R;
    scdr << m_P;
    scdr << m_binning_x;
    scdr << m_binning_y;
    scdr << m_roi;
}

void sensor_msgs::msg::CameraInfo::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_header;
    dcdr >> m_height;
    dcdr >> m_width;
    dcdr >> m_distortion_model;
    dcdr >> m_D;
    dcdr >> m_K;
    dcdr >> m_R;
    dcdr >> m_P;
    dcdr >> m_binning_x;
    dcdr >> m_binning_y;
    dcdr >> m_roi;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void sensor_msgs::msg::CameraInfo::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void sensor_msgs::msg::CameraInfo::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& sensor_msgs::msg::CameraInfo::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& sensor_msgs::msg::CameraInfo::header()
{
    return m_header;
}
/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void sensor_msgs::msg::CameraInfo::height(
        uint32_t _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
uint32_t sensor_msgs::msg::CameraInfo::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
uint32_t& sensor_msgs::msg::CameraInfo::height()
{
    return m_height;
}

/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void sensor_msgs::msg::CameraInfo::width(
        uint32_t _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
uint32_t sensor_msgs::msg::CameraInfo::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
uint32_t& sensor_msgs::msg::CameraInfo::width()
{
    return m_width;
}

/*!
 * @brief This function copies the value in member distortion_model
 * @param _distortion_model New value to be copied in member distortion_model
 */
void sensor_msgs::msg::CameraInfo::distortion_model(
        const std::string& _distortion_model)
{
    m_distortion_model = _distortion_model;
}

/*!
 * @brief This function moves the value in member distortion_model
 * @param _distortion_model New value to be moved in member distortion_model
 */
void sensor_msgs::msg::CameraInfo::distortion_model(
        std::string&& _distortion_model)
{
    m_distortion_model = std::move(_distortion_model);
}

/*!
 * @brief This function returns a constant reference to member distortion_model
 * @return Constant reference to member distortion_model
 */
const std::string& sensor_msgs::msg::CameraInfo::distortion_model() const
{
    return m_distortion_model;
}

/*!
 * @brief This function returns a reference to member distortion_model
 * @return Reference to member distortion_model
 */
std::string& sensor_msgs::msg::CameraInfo::distortion_model()
{
    return m_distortion_model;
}

/*!
 * @brief This function copies the value in member D
 * @param _D New value to be copied in member D
 */
void sensor_msgs::msg::CameraInfo::D(
        const std::vector<double>& _D)
{
    m_D = _D;
}

/*!
 * @brief This function moves the value in member D
 * @param _D New value to be moved in member D
 */
void sensor_msgs::msg::CameraInfo::D(
        std::vector<double>&& _D)
{
    m_D = std::move(_D);
}

/*!
 * @brief This function returns a constant reference to member D
 * @return Constant reference to member D
 */
const std::vector<double>& sensor_msgs::msg::CameraInfo::D() const
{
    return m_D;
}

/*!
 * @brief This function returns a reference to member D
 * @return Reference to member D
 */
std::vector<double>& sensor_msgs::msg::CameraInfo::D()
{
    return m_D;
}

/*!
 * @brief This function copies the value in member K
 * @param _K New value to be copied in member K
 */
void sensor_msgs::msg::CameraInfo::K(
        const std::vector<double>& _K)
{
    m_K = _K;
}

/*!
 * @brief This function moves the value in member K
 * @param _K New value to be moved in member K
 */
void sensor_msgs::msg::CameraInfo::K(
        std::vector<double>&& _K)
{
    m_K = std::move(_K);
}

/*!
 * @brief This function returns a constant reference to member K
 * @return Constant reference to member K
 */
const std::vector<double>& sensor_msgs::msg::CameraInfo::K() const
{
    return m_K;
}

/*!
 * @brief This function returns a reference to member K
 * @return Reference to member K
 */
std::vector<double>& sensor_msgs::msg::CameraInfo::K()
{
    return m_K;
}

/*!
 * @brief This function copies the value in member R
 * @param _R New value to be copied in member R
 */
void sensor_msgs::msg::CameraInfo::R(
        const std::vector<double>& _R)
{
    m_R = _R;
}

/*!
 * @brief This function moves the value in member R
 * @param _R New value to be moved in member R
 */
void sensor_msgs::msg::CameraInfo::R(
        std::vector<double>&& _R)
{
    m_R = std::move(_R);
}

/*!
 * @brief This function returns a constant reference to member R
 * @return Constant reference to member R
 */
const std::vector<double>& sensor_msgs::msg::CameraInfo::R() const
{
    return m_R;
}

/*!
 * @brief This function returns a reference to member R
 * @return Reference to member R
 */
std::vector<double>& sensor_msgs::msg::CameraInfo::R()
{
    return m_R;
}

/*!
 * @brief This function copies the value in member P
 * @param _P New value to be copied in member P
 */
void sensor_msgs::msg::CameraInfo::P(
        const std::vector<double>& _P)
{
    m_P = _P;
}

/*!
 * @brief This function moves the value in member P
 * @param _P New value to be moved in member P
 */
void sensor_msgs::msg::CameraInfo::P(
        std::vector<double>&& _P)
{
    m_P = std::move(_P);
}

/*!
 * @brief This function returns a constant reference to member P
 * @return Constant reference to member P
 */
const std::vector<double>& sensor_msgs::msg::CameraInfo::P() const
{
    return m_P;
}

/*!
 * @brief This function returns a reference to member P
 * @return Reference to member P
 */
std::vector<double>& sensor_msgs::msg::CameraInfo::P()
{
    return m_P;
}

/*!
 * @brief This function sets a value in member binning_x
 * @param _binning_x New value for member binning_x
 */
void sensor_msgs::msg::CameraInfo::binning_x(
        uint32_t _binning_x)
{
    m_binning_x = _binning_x;
}

/*!
 * @brief This function returns the value of member binning_x
 * @return Value of member binning_x
 */
uint32_t sensor_msgs::msg::CameraInfo::binning_x() const
{
    return m_binning_x;
}

/*!
 * @brief This function returns a reference to member binning_x
 * @return Reference to member binning_x
 */
uint32_t& sensor_msgs::msg::CameraInfo::binning_x()
{
    return m_binning_x;
}

/*!
 * @brief This function sets a value in member binning_y
 * @param _binning_y New value for member binning_y
 */
void sensor_msgs::msg::CameraInfo::binning_y(
        uint32_t _binning_y)
{
    m_binning_y = _binning_y;
}

/*!
 * @brief This function returns the value of member binning_y
 * @return Value of member binning_y
 */
uint32_t sensor_msgs::msg::CameraInfo::binning_y() const
{
    return m_binning_y;
}

/*!
 * @brief This function returns a reference to member binning_y
 * @return Reference to member binning_y
 */
uint32_t& sensor_msgs::msg::CameraInfo::binning_y()
{
    return m_binning_y;
}

/*!
 * @brief This function copies the value in member roi
 * @param _roi New value to be copied in member roi
 */
void sensor_msgs::msg::CameraInfo::roi(
        const sensor_msgs::msg::RegionOfInterest& _roi)
{
    m_roi = _roi;
}

/*!
 * @brief This function moves the value in member roi
 * @param _roi New value to be moved in member roi
 */
void sensor_msgs::msg::CameraInfo::roi(
        sensor_msgs::msg::RegionOfInterest&& _roi)
{
    m_roi = std::move(_roi);
}

/*!
 * @brief This function returns a constant reference to member roi
 * @return Constant reference to member roi
 */
const sensor_msgs::msg::RegionOfInterest& sensor_msgs::msg::CameraInfo::roi() const
{
    return m_roi;
}

/*!
 * @brief This function returns a reference to member roi
 * @return Reference to member roi
 */
sensor_msgs::msg::RegionOfInterest& sensor_msgs::msg::CameraInfo::roi()
{
    return m_roi;
}

size_t sensor_msgs::msg::CameraInfo::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return sensor_msgs_msg_CameraInfo_max_key_cdr_typesize;
}

bool sensor_msgs::msg::CameraInfo::isKeyDefined()
{
    return false;
}

void sensor_msgs::msg::CameraInfo::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}
